// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: todo.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TodoService service

type TodoService interface {
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...client.CallOption) (*CreateTodoResponse, error)
	GetTodos(ctx context.Context, in *GetTodosRequest, opts ...client.CallOption) (*GetTodosResponse, error)
}

type todoService struct {
	c    client.Client
	name string
}

func NewTodoService(name string, c client.Client) TodoService {
	return &todoService{
		c:    c,
		name: name,
	}
}

func (c *todoService) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...client.CallOption) (*CreateTodoResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.CreateTodo", in)
	out := new(CreateTodoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoService) GetTodos(ctx context.Context, in *GetTodosRequest, opts ...client.CallOption) (*GetTodosResponse, error) {
	req := c.c.NewRequest(c.name, "TodoService.GetTodos", in)
	out := new(GetTodosResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TodoService service

type TodoServiceHandler interface {
	CreateTodo(context.Context, *CreateTodoRequest, *CreateTodoResponse) error
	GetTodos(context.Context, *GetTodosRequest, *GetTodosResponse) error
}

func RegisterTodoServiceHandler(s server.Server, hdlr TodoServiceHandler, opts ...server.HandlerOption) error {
	type todoService interface {
		CreateTodo(ctx context.Context, in *CreateTodoRequest, out *CreateTodoResponse) error
		GetTodos(ctx context.Context, in *GetTodosRequest, out *GetTodosResponse) error
	}
	type TodoService struct {
		todoService
	}
	h := &todoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TodoService{h}, opts...))
}

type todoServiceHandler struct {
	TodoServiceHandler
}

func (h *todoServiceHandler) CreateTodo(ctx context.Context, in *CreateTodoRequest, out *CreateTodoResponse) error {
	return h.TodoServiceHandler.CreateTodo(ctx, in, out)
}

func (h *todoServiceHandler) GetTodos(ctx context.Context, in *GetTodosRequest, out *GetTodosResponse) error {
	return h.TodoServiceHandler.GetTodos(ctx, in, out)
}
